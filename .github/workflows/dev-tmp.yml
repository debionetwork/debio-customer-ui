name: Dev tmp automation

on:
  push:
    branches:
      - main-tmp

concurrency:
  group: dev-tmp-automation

jobs:
  compute-build-info:
    runs-on: ubuntu-latest
    outputs:
      sha_short: ${{ steps.build-info.outputs.sha_short }}
      date: ${{ steps.build-info.outputs.date }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Compute build info
        id: build-info
        shell: bash
        run: |
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
          echo "::set-output name=date::$(date +'%Y%m%d')"

  build-and-publish-docker-image:
    environment: development-tmp
    runs-on: ubuntu-latest
    needs: compute-build-info
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: create .env file
        shell: bash
        run: |
          tee -a .env <<EOF
          VUE_APP_RECAPTCHA_SITE_KEY=${{ secrets.VUE_APP_RECAPTCHA_SITE_KEY }}
          VUE_APP_ROLE=${{ secrets.VUE_APP_ROLE }}
          VUE_APP_DEBIO_USE_TOKEN_NAME=${{ secrets.VUE_APP_DEBIO_USE_TOKEN_NAME }}
          VUE_APP_DEBIO_DAI_TOKEN_ADDRESS=${{ secrets.VUE_APP_DEBIO_DAI_TOKEN_ADDRESS }}
          VUE_APP_DEBIO_ESCROW_ETH_ADDRESS=${{ secrets.VUE_APP_DEBIO_ESCROW_ETH_ADDRESS }}
          VUE_APP_DEBIO_SUBSTRATE_WS=${{ secrets.VUE_APP_DEBIO_SUBSTRATE_WS }}
          VUE_APP_WEB3_RPC=${{ secrets.VUE_APP_WEB3_RPC }}
          VUE_APP_BACKEND_API=${{ secrets.VUE_APP_BACKEND_API }}
          VUE_APP_DEBIO_API_KEY=${{ secrets.VUE_APP_DEBIO_API_KEY }}
          VUE_APP_USERNAME=${{ secrets.VUE_APP_USERNAME }}
          VUE_APP_PASSWORD=${{ secrets.VUE_APP_PASSWORD }}
          VUE_APP_MIXPANEL_TOKEN=${{ secrets.VUE_APP_MIXPANEL_TOKEN }}
          VUE_APP_SENTRY_DSN=${{ secrets.VUE_APP_SENTRY_DSN }}
          VUE_APP_PINATA_GATEWAY=${{ secrets.VUE_APP_PINATA_GATEWAY }}
          VUE_APP_PINATA_KEY=${{ secrets.VUE_APP_PINATA_KEY }}
          VUE_APP_PINATA_SECRET_KEY=${{ secrets.VUE_APP_PINATA_SECRET_KEY }}
          VUE_APP_PINATA_JWT_KEY=${{ secrets.VUE_APP_PINATA_JWT_KEY }}
          EOF
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-main
          restore-keys: |
            ${{ runner.os }}-buildx-
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v0'
        with:
          token_format: 'access_token'
          workload_identity_provider: ${{ secrets.GOOGLE_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.SERVICE_ACCOUNT_EMAIL }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}
      - name: Login to GCR
        uses: docker/login-action@v2
        with:
          registry: gcr.io
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          file: .maintain/docker/Dockerfile
          tags: |
            gcr.io/${{ secrets.DEV_GCP_PROJECT_ID }}/${{ github.repository }}:${{ needs.compute-build-info.outputs.sha_short }}-${{ needs.compute-build-info.outputs.date }}
            gcr.io/${{ secrets.DEV_GCP_PROJECT_ID }}/${{ github.repository }}:latest-pre-alpha-tmp
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
      # Temp fix
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  deploy:
    environment: development-tmp
    runs-on: ubuntu-latest
    needs: [compute-build-info, build-and-publish-docker-image]
    env:
      DEPLOY: ${{ secrets.DEV_DEPLOY }}
    steps:
      - name: Checkout code
        if: "${{ env.DEPLOY == 'true' }}"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Deploy
        if: "${{ env.DEPLOY == 'true' }}"
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            ./connect.sh
            helm repo add debio https://charts.debio.network
            helm repo update
            helm upgrade debio-customer-ui-tmp debio/debio-customer-ui \
              --install \
              --set-string image.repository=gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ github.repository }} \
              --set-string image.tag=${{ needs.compute-build-info.outputs.sha_short }}-${{ needs.compute-build-info.outputs.date }} \
              --set-string imagePullSecrets[0].name=gcr-auth \
              --set ingress.enabled=true \
              --set-string ingress.annotations."kubernetes\.io/ingress\.class"=nginx \
              --set-string ingress.annotations."cert-manager\.io/cluster-issuer"=letsencrypt \
              --set-string ingress.annotations."nginx\.ingress\.kubernetes\.io/limit-rps"="100" \
              --set-string ingress.hosts[0].host=${{ secrets.INGRESS_HOST }} \
              --set-string ingress.hosts[0].paths[0].path=/ \
              --set-string ingress.hosts[0].paths[0].pathType=ImplementationSpecific \
              --set-string ingress.tls[0].secretName=debio-customer-ui-tmp-tls \
              --set-string ingress.tls[0].hosts[0]=${{ secrets.INGRESS_HOST }} \
              --set-string resources.requests.cpu=100m \
              --set-string resources.requests.memory=256Mi \
              --set-string resources.limits.cpu=300m \
              --set-string resources.limits.memory=512Mi \
              --set replicaCount=1 \
              --set autoscaling.enabled=true \
              --set autoscaling.minReplicas=1 \
              --set autoscaling.maxReplicas=11 \
              --set-string nodeSelector.pool=general
            kubectl rollout status deployment/debio-customer-ui-tmp
